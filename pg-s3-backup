#!/bin/sh
#
# postgres-backup
#
# This script is intended to be run in a cronjob to take daily backups of a
# PostgreSQL database.
#
# postgres-backup takes no arguments, but can optionally be configured
# through environment variables, the details of which can be found immediately
# below:

# PostgreSQL connection string
: ${H_DATABASE_URL:=postgres://postgres@localhost:5432/postgres}

: ${LMS_DATABASE_URL:=postgres://postgres@localhost:5432/postgres}

# Name of the dump to take for H. Defaults to "postgres-<isodate>".
: ${H_DUMP:=h-$(date +"%Y-%m-%d-%H%M%S")}
# Name of the dump for LMS
: ${LMS_DUMP:=lms-$(date +"%Y-%m-%d-%H%M%S")}

# A "Dead Man's Snitch" URL. Optional.
: ${SNITCH_URL:=}

localpath_h=/var/lib/backup/$H_DUMP.dump
localpath_lms=/var/lib/backup/$LMS_DUMP.dump

set -eu

abort() {
    echo "error: $@" >&2
    exit 1
}

check_aws_credentials() {
    if [ -z "$AWS_ACCESS_KEY_ID" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
        abort "need to have AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY variables set"
    fi
}

check_s3_url() {
    if [ -z "$S3_URL" ]; then
        abort "need to have S3_URL variable set"
    fi
}

dump_h() {
  if ! $(pg_dump --clean --format=c -f $localpath_h $H_DATABASE_URL); then
        abort "couldn't dump database"
    fi
}

dump_lms() {
  if ! $(pg_dump --clean --format=c -f $localpath_lms $LMS_DATABASE_URL); then
        abort "couldn't dump database"
    fi
}

upload() {
    # Configure aws signature version for server side encryption.
    aws configure set s3.signature_version s3v4
    # local s3path=${S3_URL%%/}/${localpath_h##*/}
    aws s3 cp --only-show-errors $localpath_h s3://hypothesis-backup-pg/dumps/h/${localpath_h##*/} || abort "failed to upload h dump"
    aws s3 cp --only-show-errors $localpath_lms s3://hypothesis-backup-pg/dumps/lms/${localpath_lms##*/} || abort "failed to upload lms dump"

}

snitch () {
    if [ -n "$SNITCH_URL" ]; then
        curl -sSL -o/dev/null "$SNITCH_URL"
    fi
}

main() {
    # Check AWS credentials.
    check_aws_credentials

    # Check S3_URL.
    check_s3_url

    # Backup database dump.
    dump_h
    dump_lms

    # Upload to S3.
    upload

    # Report the backup.
    snitch
}

main
